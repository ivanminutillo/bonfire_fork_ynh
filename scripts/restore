#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

# Keep this path for calling _common.sh inside the execution's context of backup and restore scripts
source ../settings/scripts/_common.sh
source /usr/share/yunohost/helpers

#=================================================
# RESTORE THE APP MAIN DIR
#=================================================
ynh_script_progression --message="Restoring the app main directory..." --weight=1

ynh_restore_file --origin_path="$install_dir"

chown -R $app:www-data "$install_dir"

#=================================================
# RESTORE THE DATA DIR
#=================================================
ynh_script_progression --message="Restoring the data directory..." --weight=1

ynh_restore_file --origin_path="$data_dir"

chown -R $app:www-data "$data_dir"

#=================================================
# RESTORE THE POSTGRESQL DATABASE
#=================================================
ynh_script_progression --message="Restoring the PostgreSQL database..." --weight=1

ynh_psql_connect_as --user=$db_user --password=$db_pwd --database=$db_name < ./db.sql

#=================================================
# PULL DOCKER IMAGE
#=================================================
ynh_script_progression --message="Pulling Bonfire Docker image..." --weight=5

# Get the Docker image setting
docker_image=$(ynh_app_setting_get --app=$app --key=docker_image)

if [ -z "$docker_image" ]; then
	# Determine architecture for Docker image if not set
	# Using the social flavor (full-featured)
	arch=$(uname -m)
	if [ "$arch" = "x86_64" ]; then
	    docker_image="bonfirenetworks/bonfire:latest-social-amd64"
	elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
	    docker_image="bonfirenetworks/bonfire:latest-social-aarch64"
	else
	    ynh_die --message="Unsupported architecture: $arch"
	fi
	ynh_app_setting_set --app=$app --key=docker_image --value="$docker_image"
fi

# Ensure meilisearch directory exists
mkdir -p "$data_dir/meilisearch"
chown -R $app:www-data "$data_dir"

#=================================================
# RESTORE SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Restoring system configurations related to $app..." --weight=1

ynh_restore_file --origin_path="/etc/nginx/conf.d/$domain.d/$app.conf"

ynh_restore_file --origin_path="/etc/systemd/system/$app.service"
systemctl enable $app.service --quiet

mkdir -p "/var/log/$app"
chown -R $app:$app "/var/log/$app"
ynh_restore_file --origin_path="/etc/logrotate.d/$app"

yunohost service add $app --description="Bonfire daemon" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting Bonfire daemon service..." --weight=1

ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log" --line_match="Running Bonfire.Web.Endpoint"

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# GENERIC FINALIZATION
#=================================================
# RELOAD NGINX AND PHP-FPM OR THE APP SERVICE
#=================================================
ynh_script_progression --message="Reloading NGINX web server and $app's service..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Restoration completed for $app" --last
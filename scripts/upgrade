#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

upgrade_type=$(ynh_check_app_version_changed)

# Get the Docker image setting
docker_image=$(ynh_app_setting_get --app=$app --key=docker_image)

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..."

ynh_systemd_action --service_name=$app --action="stop" --log_path="systemd"

#=================================================
# PULL NEW DOCKER IMAGE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Updating Docker configuration..." --weight=5

	# Determine architecture for Docker image
	# Using the social flavor (full-featured)
	arch=$(uname -m)
	if [ "$arch" = "x86_64" ]; then
	    docker_image="bonfirenetworks/bonfire:latest-social-amd64"
	elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
	    docker_image="bonfirenetworks/bonfire:latest-social-aarch64"
	else
	    ynh_die --message="Unsupported architecture: $arch"
	fi

	# Store the image name for later use
	ynh_app_setting_set --app=$app --key=docker_image --value="$docker_image"
fi

# Ensure directories exist
mkdir -p "$data_dir/uploads"
mkdir -p "$data_dir/meilisearch"
chown -R $app:www-data "$install_dir"
chown -R $app:www-data "$data_dir"

#=================================================
# UPDATE CONFIGURATION
#=================================================
ynh_script_progression --message="Updating configuration files..." --weight=1

ynh_add_config --template=".env" --destination="$install_dir/.env"
chmod 400 "$install_dir/.env"
chown $app:$app "$install_dir/.env"

# Update docker-compose.yml
ynh_add_config --template="../conf/docker-compose.yml" --destination="$install_dir/docker-compose.yml"
chmod 644 "$install_dir/docker-compose.yml"
chown $app:$app "$install_dir/docker-compose.yml"

# Update log collector script
ynh_add_config --template="../conf/start-log-collector.sh" --destination="$install_dir/start-log-collector.sh"
chmod 755 "$install_dir/start-log-collector.sh"
chown $app:$app "$install_dir/start-log-collector.sh"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Upgrading system configurations related to $app..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

mkdir -p "/var/log/$app"
chown -R $app:$app "/var/log/$app"

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

# Create a dedicated systemd config
ynh_add_systemd_config

yunohost service add $app --description="Bonfire daemon" --log="/var/log/$app/$app.log"

#=================================================
# ENSURE DOCKER IS READY
#=================================================
ynh_script_progression --message="Ensuring Docker is ready..." --weight=1

# Make sure Docker service is started and ready
systemctl is-active docker.service || systemctl start docker.service

# Wait for Docker socket to be available
for i in {1..30}; do
    if docker info >/dev/null 2>&1; then
        ynh_print_info "Docker is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        ynh_die "Docker failed to start"
    fi
    sleep 1
done

ynh_script_progression --message="Starting Bonfire daemon service..." --weight=1

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start"

# Wait for containers to be running
ynh_script_progression --message="Waiting for containers to start..." --weight=3

sleep 5  # Give systemd time to start containers

# Wait for Bonfire container to be running
for i in {1..60}; do
    if docker ps | grep -q "bonfire-$app"; then
        ynh_print_info "Bonfire container is running"
        break
    fi
    if [ $i -eq 60 ]; then
        ynh_die "Bonfire container failed to start"
    fi
    sleep 2
done

# Wait for Bonfire to be ready (check logs for startup message)
ynh_script_progression --message="Waiting for Bonfire to be ready..." --weight=5

for i in {1..90}; do
    if docker logs "bonfire-$app" 2>&1 | grep -q "Running Bonfire.Web.Endpoint"; then
        ynh_print_info "Bonfire is ready!"
        break
    fi
    if [ $i -eq 90 ]; then
        ynh_print_warn "Bonfire may not be fully ready yet, check logs: docker logs bonfire-$app"
    fi
    sleep 2
done

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
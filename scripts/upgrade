#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STOP SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Stopping systemd services..."

ynh_systemd_action --service_name=$app --action="stop" --log_path="systemd"
ynh_systemd_action --service_name="meilisearch-$app" --action="stop" --log_path="systemd"

#=================================================
# UPDATE BONFIRE RELEASE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Updating Bonfire release..." --weight=5

	# Determine architecture
	arch=$(uname -m)
	if [ "$arch" = "x86_64" ]; then
	    docker_image="bonfirenetworks/bonfire:latest-social-amd64"
	    meili_arch="amd64"
	elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
	    docker_image="bonfirenetworks/bonfire:latest-social-aarch64"
	    meili_arch="aarch64"
	else
	    ynh_die --message="Unsupported architecture: $arch"
	fi

	# Temporarily install Docker to extract new release
	ynh_print_info "Installing Docker temporarily to extract new Bonfire release..."
	apt-get install -y docker.io

	# Pull new image
	docker pull "$docker_image"

	# Create temporary container
	container_id=$(docker create "$docker_image")

	# Backup current release
	mv "$install_dir" "$install_dir.backup"

	# Extract new release
	mkdir -p "$install_dir"
	docker cp "$container_id:/opt/app/." "$install_dir/"

	# Restore configuration
	cp "$install_dir.backup/.env" "$install_dir/.env"

	# Remove temporary container and image
	docker rm "$container_id"
	docker rmi "$docker_image"

	# Clean up Docker
	apt-get remove -y docker.io
	apt-get autoremove -y

	# Remove backup
	rm -rf "$install_dir.backup"

	# Update Meilisearch
	meili_version="v1.14.0"
	curl -L "https://github.com/meilisearch/meilisearch/releases/download/$meili_version/meilisearch-linux-$meili_arch" -o "$install_dir/meilisearch"
	chmod +x "$install_dir/meilisearch"
fi

# Ensure directories exist
mkdir -p "$data_dir/uploads"
mkdir -p "$data_dir/meilisearch"
chown -R $app:www-data "$install_dir"
chown -R $app:www-data "$data_dir"

#=================================================
# UPDATE A CONFIGURATION
#=================================================
ynh_script_progression --message="Updating a configuration file..."

ynh_add_config --template="../conf/.env" --destination="$install_dir/.env"
ynh_store_file_checksum --file="$install_dir/.env"

chmod 400 "$install_dir/.env"
chown $app:$app "$install_dir/.env"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Upgrading system configurations related to $app..." --weight=1

# Create Meilisearch service (if not exists)
ynh_add_systemd_config --service="meilisearch-$app" --template="meilisearch.service"

# Create/update Bonfire service
ynh_add_systemd_config

ynh_add_nginx_config

ynh_use_logrotate --non-append

#=================================================
# START SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Starting systemd services..." --weight=1

# Start Meilisearch first
ynh_systemd_action --service_name="meilisearch-$app" --action="start" --log_path="/var/log/$app/meilisearch.log"

# Start Bonfire
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# RUN DATABASE MIGRATIONS
#=================================================
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Running database migrations..." --weight=3

	# Wait for app to be ready
	sleep 10

	# Run migrations
	pushd "$install_dir"
	su - $app -c "cd $install_dir && ./bin/migrate" || ynh_print_warn "Migrations may need to be run manually."
	popd
fi

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last

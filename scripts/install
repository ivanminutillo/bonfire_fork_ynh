#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# ENABLE POSTGRESQL EXTENSIONS
#=================================================
ynh_script_progression --message="Enabling PostgreSQL extensions..." --weight=1

ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS citext;" --database="$db_name"
ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS postgis;" --database="$db_name"

#=================================================
# DOWNLOAD PRE-BUILT RELEASE
#=================================================
ynh_script_progression --message="Downloading Bonfire release (this may take a few minutes)..." --weight=10

# Download and extract pre-built release
ynh_setup_source --dest_dir="$install_dir" --full_replace=1

# The tarball extracts to a "bonfire" subdirectory, move contents up one level
if [ -d "$install_dir/bonfire" ]; then
    mv "$install_dir/bonfire/"* "$install_dir/" 2>/dev/null || true
    mv "$install_dir/bonfire/".* "$install_dir/" 2>/dev/null || true
    rmdir "$install_dir/bonfire"
fi

#=================================================
# SETUP DIRECTORIES
#=================================================
ynh_script_progression --message="Setting up directories..." --weight=1

mkdir -p "$data_dir/uploads"
mkdir -p "/var/log/$app"

#=================================================
# GENERATE SECRETS
#=================================================
ynh_script_progression --message="Generating secrets..." --weight=1

## Generate secrets and other config values
secret_key_base=$(ynh_string_random --length=64)
signing_salt=$(ynh_string_random --length=64)
encryption_salt=$(ynh_string_random --length=64)
# search
meili_master_key=$(ynh_string_random --length=64)
# max file upload size - convert from "35MB" to bytes "35000000"
upload_limit_bytes="${media_upload_size//[!0-9]/}000000"

# Set instance configuration from installation questions
# These variables are automatically available from manifest.toml [install] section:
# - $instance_name
# - $invite_only (true/false)
# - $instance_description (optional)

#=================================================
# INSTALL MEILISEARCH
#=================================================
ynh_script_progression --message="Installing Meilisearch..." --weight=2

# Determine architecture
arch=$(uname -m)
if [ "$arch" = "x86_64" ]; then
    meili_arch="amd64"
elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
    meili_arch="aarch64"
else
    ynh_die --message="Unsupported architecture: $arch"
fi

# Download and install Meilisearch
meili_version="v1.14.0"
ynh_exec_warn_less curl -L "https://github.com/meilisearch/meilisearch/releases/download/$meili_version/meilisearch-linux-$meili_arch" -o "$install_dir/meilisearch"
chmod +x "$install_dir/meilisearch"

# Create meilisearch data directory
mkdir -p "$data_dir/meilisearch"

#=================================================
# ADD CONFIGURATION
#=================================================
ynh_script_progression --message="Adding configuration..." --weight=1

# Create .env file directly (no build step needed)
ynh_add_config --template="../conf/.env" --destination="$install_dir/.env"
chmod 400 "$install_dir/.env"
chown $app:$app "$install_dir/.env"

#=================================================
# SETUP PERMISSIONS
#=================================================
chown -R $app:www-data "$install_dir"
chown -R $app:www-data "$data_dir"
chmod -R 750 "$install_dir"
chmod +x "$install_dir/bin/bonfire"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring systemd services..." --weight=1

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

# Create Meilisearch systemd service
ynh_add_systemd_config --service="meilisearch-$app" --template="meilisearch.service"

# Create Bonfire systemd config
ynh_add_systemd_config

yunohost service add "meilisearch-$app" --description="Meilisearch for Bonfire" --log="/var/log/$app/meilisearch.log"
yunohost service add $app --description="Bonfire daemon" --log="/var/log/$app/$app.log"

#=================================================
# START SERVICES
#=================================================
ynh_script_progression --message="Starting Meilisearch service..." --weight=1
ynh_systemd_action --service_name="meilisearch-$app" --action="start" --log_path="/var/log/$app/meilisearch.log"

ynh_script_progression --message="Starting Bonfire daemon service..." --weight=1
# Bonfire runs migrations on first start which can take 2-3 minutes
# Wait for migrations to complete and server to start (default timeout is 90s, we need more)
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log" --line_match="Running Bonfire.Web.Endpoint" --timeout=300

#=================================================
# CREATE ADMIN USER
#=================================================
ynh_script_progression --message="Creating admin user account..." --weight=1

# Get admin email from YunoHost
admin_email=$(ynh_user_get_info --username="$admin" --key=mail)

# Create admin account in Bonfire using RPC eval
pushd "$install_dir"
ynh_exec_warn_less ynh_exec_as $app env PATH="$PATH" "$install_dir/bin/bonfire" rpc "Bonfire.Me.make_account_and_user(\"$admin\", \"$admin_email\", \"$password\")"
popd

#=================================================
# SETUP NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=1

ynh_add_nginx_config

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --weight=1
ynh_script_progression --message="Admin account created: $admin (email: $admin_email)" --last

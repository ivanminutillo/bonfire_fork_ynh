#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# ENSURE LOCALE EXISTS FOR POSTGRESQL
#=================================================
# PostgreSQL requires en_US.UTF-8 locale to be generated
if ! locale -a | grep -q "en_US.utf8"; then
    ynh_script_progression --message="Generating en_US.UTF-8 locale for PostgreSQL..." --weight=1
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
    locale-gen
fi

#=================================================
# FIX POSTGRESQL CLUSTER IF NOT CREATED
#=================================================
# If PostgreSQL was installed but cluster creation failed, create it manually
if [ ! -d "/etc/postgresql/15/main" ]; then
    if command -v pg_createcluster >/dev/null 2>&1; then
        ynh_script_progression --message="Creating PostgreSQL cluster..." --weight=2

        # Create the cluster with explicit locale
        LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 pg_createcluster 15 main --start || {
            # If that fails, try with C locale
            ynh_print_warn "Failed to create cluster with en_US.UTF-8, trying with C locale..."
            pg_createcluster 15 main --locale=C.UTF-8 --start || true
        }

        # Ensure PostgreSQL is running
        systemctl enable postgresql 2>/dev/null || true
        systemctl start postgresql 2>/dev/null || true
        systemctl restart postgresql 2>/dev/null || true

        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
            if su - postgres -c "psql -c 'SELECT 1;'" >/dev/null 2>&1; then
                ynh_print_info "PostgreSQL is ready"
                break
            fi
            sleep 1
        done
    else
        ynh_die "PostgreSQL is installed but pg_createcluster command not found"
    fi
fi

#=================================================
# SETUP DIRECTORIES AND PERMISSIONS
#=================================================
ynh_script_progression --message="Setting up directories..." --weight=1

# Create data directories for uploads and meilisearch
mkdir -p "$data_dir/uploads"
mkdir -p "$data_dir/meilisearch"

chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"
chmod -R o-rwx "$data_dir"
chown -R $app:www-data "$data_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# ADD A CONFIGURATION
#=================================================
## Generate secrets and other config values
secret_key_base=$(ynh_string_random --length=64)
signing_salt=$(ynh_string_random --length=64)
encryption_salt=$(ynh_string_random --length=64)
# search
meili_master_key=$(ynh_string_random --length=64)
# max file upload size
MEDIA_UPLOAD_SIZE="${media_upload_size//[!0-9]/}000000"

ynh_script_progression --message="Adding a configuration file..." --weight=1

ynh_add_config --template="../conf/.env" --destination="$install_dir/.env"
ynh_store_file_checksum --file="$install_dir/.env"

chmod 400 "$install_dir/.env"
chown $app:$app "$install_dir/.env"

#=================================================
# CREATE DOCKER-COMPOSE CONFIGURATION
#=================================================
ynh_script_progression --message="Creating Docker Compose configuration..." --weight=1

# Determine architecture for Docker image
# Using the social flavor (full-featured)
arch=$(uname -m)
if [ "$arch" = "x86_64" ]; then
    docker_image="bonfirenetworks/bonfire:latest-social-amd64"
elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
    docker_image="bonfirenetworks/bonfire:latest-social-aarch64"
else
    ynh_die --message="Unsupported architecture: $arch"
fi

# Store the image name for later use
ynh_app_setting_set --app=$app --key=docker_image --value="$docker_image"

# Create docker-compose.yml from template
ynh_add_config --template="../conf/docker-compose.yml" --destination="$install_dir/docker-compose.yml"

chmod 644 "$install_dir/docker-compose.yml"
chown $app:$app "$install_dir/docker-compose.yml"

# Create log collector script
ynh_add_config --template="../conf/start-log-collector.sh" --destination="$install_dir/start-log-collector.sh"

chmod 755 "$install_dir/start-log-collector.sh"
chown $app:$app "$install_dir/start-log-collector.sh"

#=================================================
# CONFIGURE POSTGRESQL FOR DOCKER ACCESS
#=================================================
ynh_script_progression --message="Configuring PostgreSQL for Docker access..." --weight=1

# Allow PostgreSQL to accept connections from Docker bridge network
# This is needed for the container to connect to the host's PostgreSQL
ynh_psql_execute_as_root --sql="ALTER SYSTEM SET listen_addresses = 'localhost,172.17.0.1';"
ynh_psql_execute_as_root --sql="SELECT pg_reload_conf();"

# Add pg_hba.conf rule for Docker network (if not already present)
if ! grep -q "172.17.0.0/16" /etc/postgresql/*/main/pg_hba.conf 2>/dev/null; then
    echo "host    all             all             172.17.0.0/16           scram-sha-256" >> /etc/postgresql/*/main/pg_hba.conf
    systemctl reload postgresql
fi

#=================================================
# ENSURE DOCKER IS READY
#=================================================
ynh_script_progression --message="Ensuring Docker is ready..." --weight=1

# Make sure Docker service is started and ready
systemctl is-active docker.service || systemctl start docker.service

# Wait for Docker socket to be available
for i in {1..30}; do
    if docker info >/dev/null 2>&1; then
        ynh_print_info "Docker is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        ynh_die "Docker failed to start"
    fi
    sleep 1
done

#=================================================
# SETUP SYSTEMD SERVICE
#=================================================

mkdir -p "/var/log/$app"
chown -R $app:$app "/var/log/$app"

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

# Create a dedicated systemd config
ynh_add_systemd_config

yunohost service add $app --description="Bonfire daemon" --log="/var/log/$app/$app.log"

ynh_script_progression --message="Starting Bonfire daemon service..." --weight=1

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start"

# Wait for containers to be running
ynh_script_progression --message="Waiting for containers to start..." --weight=3

sleep 5  # Give systemd time to start containers

# Wait for Bonfire container to be running
for i in {1..60}; do
    if docker ps | grep -q "bonfire-$app"; then
        ynh_print_info "Bonfire container is running"
        break
    fi
    if [ $i -eq 60 ]; then
        ynh_die "Bonfire container failed to start"
    fi
    sleep 2
done

# Wait for Bonfire to be ready (check logs for startup message)
ynh_script_progression --message="Waiting for Bonfire to be ready..." --weight=5

for i in {1..90}; do
    if docker logs "bonfire-$app" 2>&1 | grep -q "Running Bonfire.Web.Endpoint"; then
        ynh_print_info "Bonfire is ready!"
        break
    fi
    if [ $i -eq 90 ]; then
        ynh_print_warn "Bonfire may not be fully ready yet, check logs: docker logs bonfire-$app"
    fi
    sleep 2
done

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --weight=1
ynh_script_progression --message="Now you need to sign-up, the first account will automatically be admin." --last
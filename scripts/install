#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# INSTALL NODEJS
#=================================================
ynh_script_progression --message="Installing Node.js..." --weight=3

ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version
ynh_use_nodejs

#=================================================
# ENABLE POSTGRESQL EXTENSIONS
#=================================================
ynh_script_progression --message="Enabling PostgreSQL extensions..." --weight=1

ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS citext;" --database="$db_name"
ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS postgis;" --database="$db_name"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=5

ynh_setup_source --dest_dir="$install_dir" --full_replace=1

chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

#=================================================
# SETUP DIRECTORIES AND PERMISSIONS
#=================================================
ynh_script_progression --message="Setting up directories..." --weight=1

# Create data directories for uploads and meilisearch
mkdir -p "$data_dir/uploads"
mkdir -p "$data_dir/meilisearch"

chmod -R o-rwx "$data_dir"
chown -R $app:www-data "$data_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding configuration..." --weight=1

## Generate secrets and other config values
secret_key_base=$(ynh_string_random --length=64)
signing_salt=$(ynh_string_random --length=64)
encryption_salt=$(ynh_string_random --length=64)
# search
meili_master_key=$(ynh_string_random --length=64)
# max file upload size - convert from "35MB" to bytes "35000000"
upload_limit_bytes="${media_upload_size//[!0-9]/}000000"

ynh_add_config --template="../conf/.env" --destination="$install_dir/.env"
ynh_store_file_checksum --file="$install_dir/.env"

chmod 400 "$install_dir/.env"
chown $app:$app "$install_dir/.env"

#=================================================
# INSTALL MEILISEARCH
#=================================================
ynh_script_progression --message="Installing Meilisearch..." --weight=3

# Determine architecture
arch=$(uname -m)
if [ "$arch" = "x86_64" ]; then
    meili_arch="amd64"
elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
    meili_arch="aarch64"
else
    ynh_die --message="Unsupported architecture: $arch"
fi

# Download and install Meilisearch
meili_version="v1.14.0"
curl -L "https://github.com/meilisearch/meilisearch/releases/download/$meili_version/meilisearch-linux-$meili_arch" -o "$install_dir/meilisearch"
chmod +x "$install_dir/meilisearch"

#=================================================
# BUILD BONFIRE RELEASE
#=================================================
ynh_script_progression --message="Building Bonfire (this will take 15-30 minutes)..." --weight=50

pushd "$install_dir"

# Set environment for build
export PATH="$nodejs_path:$PATH"
export FLAVOUR=social
export MIX_ENV=prod
export WITH_DOCKER=no

# Initialize Bonfire configuration
ynh_exec_warn_less ynh_exec_as $app env PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no just config

# Setup production environment (installs deps, compiles assets, etc.)
ynh_exec_warn_less ynh_exec_as $app env PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no just setup-prod

# Build the release
ynh_exec_warn_less ynh_exec_as $app env PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no just rel-build

popd

# Check if build succeeded
if [ ! -f "$install_dir/_build/prod/rel/bonfire/bin/bonfire" ]; then
    ynh_die "Build failed - Bonfire binary not found"
fi

#=================================================
# SETUP SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Configuring systemd services..." --weight=1

mkdir -p "/var/log/$app"
chown -R $app:$app "/var/log/$app"

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

# Create Meilisearch systemd service
ynh_add_systemd_config --service="meilisearch-$app" --template="meilisearch.service"

# Create Bonfire systemd config
ynh_add_systemd_config

yunohost service add "meilisearch-$app" --description="Meilisearch for Bonfire" --log="/var/log/$app/meilisearch.log"
yunohost service add $app --description="Bonfire daemon" --log="/var/log/$app/$app.log"

#=================================================
# START SERVICES
#=================================================
ynh_script_progression --message="Starting Meilisearch service..." --weight=1
ynh_systemd_action --service_name="meilisearch-$app" --action="start" --log_path="/var/log/$app/meilisearch.log"

ynh_script_progression --message="Starting Bonfire daemon service..." --weight=1
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log" --line_match="Running Bonfire.Web.Endpoint"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --weight=1
ynh_script_progression --message="Now you need to sign-up, the first account will automatically be admin." --last

#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# ENABLE POSTGRESQL EXTENSIONS
#=================================================
ynh_script_progression --message="Enabling PostgreSQL extensions..." --weight=1

ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS citext;" --database="$db_name"
ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS postgis;" --database="$db_name"

#=================================================
# DOWNLOAD PRE-BUILT RELEASE
#=================================================
ynh_script_progression --message="Downloading Bonfire release (this may take a few minutes)..." --weight=10

# Download and extract pre-built release
ynh_setup_source --dest_dir="$install_dir" --full_replace=1

# The tarball extracts to a "bonfire" subdirectory, move contents up one level
if [ -d "$install_dir/bonfire" ]; then
    mv "$install_dir/bonfire/"* "$install_dir/" 2>/dev/null || true
    mv "$install_dir/bonfire/".* "$install_dir/" 2>/dev/null || true
    rmdir "$install_dir/bonfire"
fi

#=================================================
# SETUP DIRECTORIES
#=================================================
ynh_script_progression --message="Setting up directories..." --weight=1

mkdir -p "$data_dir/uploads"
mkdir -p "/var/log/$app"

#=================================================
# GENERATE SECRETS
#=================================================
ynh_script_progression --message="Generating secrets..." --weight=1

## Generate secrets and other config values
secret_key_base=$(ynh_string_random --length=64)
signing_salt=$(ynh_string_random --length=64)
encryption_salt=$(ynh_string_random --length=64)
# search
meili_master_key=$(ynh_string_random --length=64)
# max file upload size - convert from "35MB" to bytes "35000000"
upload_limit_bytes="${media_upload_size//[!0-9]/}000000"

# Set instance configuration from installation questions
# These variables are automatically available from manifest.toml [install] section:
# - $instance_name
# - $invite_only (true/false)
# - $instance_description (optional)

#=================================================
# INSTALL LIBSSL1.1 FOR OPENSSL COMPATIBILITY
#=================================================
ynh_script_progression --message="Installing OpenSSL 1.1 compatibility library..." --weight=1

# Install libssl1.1 from Bullseye (needed for Erlang crypto module)
# The pre-built Bonfire release was compiled on Debian Bullseye
ynh_setup_source --source_id=libssl --dest_dir="/tmp/libssl_install"
dpkg -i /tmp/libssl_install/libssl1.1.deb || ynh_die "Failed to install libssl1.1"
ynh_secure_remove --file="/tmp/libssl_install"

#=================================================
# INSTALL MEILISEARCH
#=================================================
ynh_script_progression --message="Installing Meilisearch..." --weight=2

# Determine architecture
arch=$(uname -m)
if [ "$arch" = "x86_64" ]; then
    meili_arch="amd64"
elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
    meili_arch="aarch64"
else
    ynh_die --message="Unsupported architecture: $arch"
fi

# Download and install Meilisearch
meili_version="v1.14.0"
ynh_exec_warn_less curl -L "https://github.com/meilisearch/meilisearch/releases/download/$meili_version/meilisearch-linux-$meili_arch" -o "$install_dir/meilisearch"
chmod +x "$install_dir/meilisearch"

# Create meilisearch data directory
mkdir -p "$data_dir/meilisearch"
mkdir -p "$data_dir/meilisearch/dumps"
chown -R $app:$app "$data_dir/meilisearch"
chmod 750 "$data_dir/meilisearch"

# Create log directory for both services
mkdir -p "/var/log/$app"
chown -R $app:$app "/var/log/$app"

#=================================================
# ADD CONFIGURATION
#=================================================
ynh_script_progression --message="Adding configuration..." --weight=1

# Create .env file directly (no build step needed)
ynh_add_config --template="../conf/.env" --destination="$install_dir/.env"
chmod 400 "$install_dir/.env"
chown $app:$app "$install_dir/.env"

#=================================================
# SETUP PERMISSIONS
#=================================================
chown -R $app:www-data "$install_dir"
chown -R $app:www-data "$data_dir"
chmod -R 750 "$install_dir"
chmod +x "$install_dir/bin/bonfire"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring systemd services..." --weight=1

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

# Create Meilisearch systemd service
ynh_add_systemd_config --service="meilisearch-$app" --template="meilisearch.service"

# Install startup wrapper script
ynh_add_config --template="bonfire-start.sh" --destination="$install_dir/bonfire-start.sh"
chmod +x "$install_dir/bonfire-start.sh"
chown $app:$app "$install_dir/bonfire-start.sh"

# Create Bonfire systemd config
ynh_add_systemd_config

yunohost service add "meilisearch-$app" --description="Meilisearch for Bonfire" --log="/var/log/$app/meilisearch.log"
yunohost service add $app --description="Bonfire daemon" --log="/var/log/$app/$app.log"

#=================================================
# SETUP FAIL2BAN
#=================================================
ynh_script_progression --message="Configuring Fail2Ban..." --weight=1

# Configure Fail2Ban
# Note: Bonfire logs format may vary - this is a basic pattern
# TODO: Verify actual Bonfire auth failure log format and adjust regex accordingly
ynh_add_fail2ban_config --logpath="/var/log/$app/$app.log" --failregex="^.*authentication.*failed.*<HOST>.*$"

#=================================================
# START SERVICES
#=================================================
ynh_script_progression --message="Starting Meilisearch service..." --weight=1
ynh_systemd_action --service_name="meilisearch-$app" --action="start" --log_path="/var/log/$app/meilisearch.log"

# Wait for Meilisearch to be ready
ynh_script_progression --message="Waiting for Meilisearch to be ready..." --weight=1
for i in {1..30}; do
    if curl -s "http://localhost:7700/health" | grep -q "available"; then
        ynh_print_info "Meilisearch is ready"
        break
    fi
    sleep 1
done

#=================================================
# RUN DATABASE MIGRATIONS
#=================================================
ynh_script_progression --message="Running database migrations..." --weight=3

# Run migrations using the Bonfire release command with all required env vars
cd "$install_dir"
sudo -u $app env HOME=$install_dir \
    MIX_ENV=prod \
    DATABASE_URL="postgresql://$app:$db_pwd@localhost/$app" \
    POSTGRES_USER="$app" \
    POSTGRES_PASSWORD="$db_pwd" \
    POSTGRES_HOST="localhost" \
    POSTGRES_DB="$app" \
    SECRET_KEY_BASE="$secret_key_base" \
    SIGNING_SALT="$signing_salt" \
    ENCRYPTION_SALT="$encryption_salt" \
    MEILI_MASTER_KEY="$meili_master_key" \
    $install_dir/bin/bonfire eval 'Bonfire.Common.Repo.migrate()' || {
    ynh_print_warn "Migration command failed, will retry on service start"
}

ynh_script_progression --message="Starting Bonfire daemon service..." --weight=1
# Start the service
ynh_systemd_action --service_name=$app --action="start"

# Monitor service startup for 60 seconds
ynh_script_progression --message="Waiting for Bonfire to complete migrations and start up (checking for up to 60 seconds)..." --weight=5

for i in {1..12}; do
    sleep 5
    if systemctl is-active --quiet $app; then
        ynh_print_info "Bonfire service is running (checked after $((i*5)) seconds)"
        # Give it a bit more time to finish migrations
        sleep 30
        break
    else
        ynh_print_warn "Bonfire service not yet stable (attempt $i/12)..."
        if [ $i -eq 12 ]; then
            ynh_print_err "Bonfire service failed to start after 60 seconds"
            ynh_print_err "Last 50 lines of journalctl:"
            journalctl -u $app -n 50 --no-pager >&2 || true
            ynh_print_err "You can check logs with: journalctl -u $app -n 100"
            # Don't fail installation, continue to show post-install message
        fi
    fi
done

#=================================================
# SETUP NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=1

ynh_add_nginx_config

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --weight=1

# Display post-install instructions
message="Bonfire has been successfully installed!

IMPORTANT: You need to create your admin account.

Please visit: https://$domain/
And sign up with your desired username and email address.

Note: The first user to sign up will automatically become an instance administrator.

If you set your instance to 'invite only' during installation, you can still access the signup page directly."

ynh_script_progression --message="Installation of $app completed" --last

# Print the message to the admin
echo "$message" >&2

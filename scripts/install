#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# INSTALL ELIXIR USING ASDF
#=================================================
ynh_script_progression --message="Installing Elixir 1.17..." --weight=10

# Ensure home directory exists with correct permissions
mkdir -p "/home/$app"
chown -R $app:$app "/home/$app"
chmod 755 "/home/$app"

# Install asdf version manager for the app user (Erlang comes from system packages)
if [ ! -d "/home/$app/.asdf" ]; then
    ynh_exec_as $app git clone https://github.com/asdf-vm/asdf.git "/home/$app/.asdf" --branch v0.14.0
fi

# Source asdf
export ASDF_DIR="/home/$app/.asdf"
export ASDF_DATA_DIR="/home/$app/.asdf"
source "/home/$app/.asdf/asdf.sh"

# Add Elixir plugin
ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" /home/$app/.asdf/bin/asdf plugin add elixir https://github.com/asdf-vm/asdf-elixir.git || true

# Install Elixir 1.17 (uses system Erlang)
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" /home/$app/.asdf/bin/asdf install elixir 1.17.3-otp-25

# Set global version
ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" /home/$app/.asdf/bin/asdf global elixir 1.17.3-otp-25

#=================================================
# INSTALL NODEJS
#=================================================
ynh_script_progression --message="Installing Node.js..." --weight=3

ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version
ynh_use_nodejs

#=================================================
# ENABLE POSTGRESQL EXTENSIONS
#=================================================
ynh_script_progression --message="Enabling PostgreSQL extensions..." --weight=1

ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS citext;" --database="$db_name"
ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS postgis;" --database="$db_name"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=5

ynh_setup_source --dest_dir="$install_dir" --full_replace=1

# Create .tool-versions file for asdf in the project directory
echo "elixir 1.17.3-otp-25" > "$install_dir/.tool-versions"

# Patch install scripts to respect AUTO_YES environment variable
sed -i 's/^AUTO_YES=false$/AUTO_YES=${AUTO_YES:-false}/' "$install_dir/extensions/social/install.sh" || true
sed -i 's/^AUTO_YES=false$/AUTO_YES=${AUTO_YES:-false}/' "$install_dir/extensions/ember/install.sh" || true

# Set ownership FIRST so the bonfire user can initialize git
chown -R $app:www-data "$install_dir"

# Initialize git repo as the bonfire user (Bonfire build expects git)
pushd "$install_dir"
ynh_exec_as $app git init
ynh_exec_as $app git config user.email "bonfire@localhost"
ynh_exec_as $app git config user.name "Bonfire"
ynh_exec_as $app git add .
ynh_exec_as $app git commit -m "Initial Bonfire source" || true
popd

chmod -R o-rwx "$install_dir"

#=================================================
# SETUP DIRECTORIES AND PERMISSIONS
#=================================================
ynh_script_progression --message="Setting up directories..." --weight=1

# Create data directories for uploads and meilisearch
mkdir -p "$data_dir/uploads"
mkdir -p "$data_dir/meilisearch"

chmod -R o-rwx "$data_dir"
chown -R $app:www-data "$data_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding configuration..." --weight=1

## Generate secrets and other config values
secret_key_base=$(ynh_string_random --length=64)
signing_salt=$(ynh_string_random --length=64)
encryption_salt=$(ynh_string_random --length=64)
# search
meili_master_key=$(ynh_string_random --length=64)
# max file upload size - convert from "35MB" to bytes "35000000"
upload_limit_bytes="${media_upload_size//[!0-9]/}000000"

# Note: .env file will be created after 'just config' runs, as that command
# deletes .env and creates a symlink to config/prod/.env

#=================================================
# INSTALL MEILISEARCH
#=================================================
ynh_script_progression --message="Installing Meilisearch..." --weight=3

# Determine architecture
arch=$(uname -m)
if [ "$arch" = "x86_64" ]; then
    meili_arch="amd64"
elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
    meili_arch="aarch64"
else
    ynh_die --message="Unsupported architecture: $arch"
fi

# Download and install Meilisearch
meili_version="v1.14.0"
curl -L "https://github.com/meilisearch/meilisearch/releases/download/$meili_version/meilisearch-linux-$meili_arch" -o "$install_dir/meilisearch"
chmod +x "$install_dir/meilisearch"

#=================================================
# BUILD BONFIRE RELEASE
#=================================================
ynh_script_progression --message="Building Bonfire (this will take 15-30 minutes)..." --weight=50

pushd "$install_dir"

# Set environment for build
export ASDF_DIR="/home/$app/.asdf"
export ASDF_DATA_DIR="/home/$app/.asdf"
export PATH="/home/$app/.asdf/shims:/home/$app/.asdf/bin:$nodejs_path:$PATH"
export FLAVOUR=social
export MIX_ENV=prod
export WITH_DOCKER=no
export AUTO_YES=true

# Initialize Bonfire configuration (this creates config/prod/.env and symlinks .env to it)
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no AUTO_YES=true just config

# Now create our .env configuration (just config created the symlink, so we write to the real file)
ynh_add_config --template="../conf/.env" --destination="$install_dir/config/prod/.env"
chmod 400 "$install_dir/config/prod/.env"
chown $app:$app "$install_dir/config/prod/.env"

# Run build steps manually to patch install scripts between deps fetch and flavour install
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no just build
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no just _clone_flavour_apps
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no just flavour_make_symlinks social
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no just deps-fetch --only prod

# Now patch the install scripts to respect AUTO_YES environment variable
sed -i 's/^AUTO_YES=false$/AUTO_YES=${AUTO_YES:-false}/' "$install_dir/extensions/social/install.sh" 2>/dev/null || true
sed -i 's/^AUTO_YES=false$/AUTO_YES=${AUTO_YES:-false}/' "$install_dir/extensions/ember/install.sh" 2>/dev/null || true
sed -i 's/^AUTO_YES=false$/AUTO_YES=${AUTO_YES:-false}/' "$install_dir/deps/social/install.sh" 2>/dev/null || true
sed -i 's/^AUTO_YES=false$/AUTO_YES=${AUTO_YES:-false}/' "$install_dir/deps/ember/install.sh" 2>/dev/null || true

# Continue with the rest of setup-prod-build
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no AUTO_YES=true just _deps-post-get
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no AUTO_YES=true just _flavour_install social

# Build the release
ynh_exec_warn_less ynh_exec_as $app env ASDF_DIR="$ASDF_DIR" ASDF_DATA_DIR="$ASDF_DATA_DIR" PATH="$PATH" FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no AUTO_YES=true just rel-build

popd

# Check if build succeeded
if [ ! -f "$install_dir/_build/prod/rel/bonfire/bin/bonfire" ]; then
    ynh_die "Build failed - Bonfire binary not found"
fi

#=================================================
# SETUP SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Configuring systemd services..." --weight=1

mkdir -p "/var/log/$app"
chown -R $app:$app "/var/log/$app"

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

# Create Meilisearch systemd service
ynh_add_systemd_config --service="meilisearch-$app" --template="meilisearch.service"

# Create Bonfire systemd config
ynh_add_systemd_config

yunohost service add "meilisearch-$app" --description="Meilisearch for Bonfire" --log="/var/log/$app/meilisearch.log"
yunohost service add $app --description="Bonfire daemon" --log="/var/log/$app/$app.log"

#=================================================
# START SERVICES
#=================================================
ynh_script_progression --message="Starting Meilisearch service..." --weight=1
ynh_systemd_action --service_name="meilisearch-$app" --action="start" --log_path="/var/log/$app/meilisearch.log"

ynh_script_progression --message="Starting Bonfire daemon service..." --weight=1
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log" --line_match="Running Bonfire.Web.Endpoint"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --weight=1
ynh_script_progression --message="Now you need to sign-up, the first account will automatically be admin." --last
